#!/usr/bin/env tsx
/**
 * Migration script: JSON files → Supabase
 * Transfers all existing betting tips from JSON files to Supabase database
 */

// CRITICAL: Load environment variables BEFORE importing anything else
import { config } from 'dotenv';
import path from 'path';
config({ path: path.resolve(process.cwd(), '.env.local') });

// Now import the rest after env vars are loaded
import { promises as fs } from 'fs';
import { validateDailyTips } from '../src/lib/schemas';
import type { DailyTipsPayload } from '../src/lib/types';

// Import these functions dynamically after env vars are confirmed
let saveDailyTipsToDb: any;
let checkSupabaseConnection: any;
let getSupabaseConfig: any;

const DATA_DIR = path.join(process.cwd(), 'data', 'daily');

interface MigrationStats {
  filesProcessed: number;
  filesSkipped: number;
  tipsMigrated: number;
  errors: string[];
}

async function migrateToSupabase(): Promise<void> {
  console.log('🚀 BETTING TIPS MIGRATION: JSON → SUPABASE');
  console.log('='.repeat(50));
  
  // 1. Verify environment variables are loaded
  console.log('\n🔧 Checking environment variables...');
  const hasUrl = !!process.env.NEXT_PUBLIC_SUPABASE_URL;
  const hasKey = !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  
  console.log(`   URL: ${hasUrl ? '✅ Set' : '❌ Missing'}`);
  console.log(`   Key: ${hasKey ? '✅ Set' : '❌ Missing'}`);
  
  if (!hasUrl || !hasKey) {
    console.log('\n❌ Missing Supabase environment variables!');
    console.log('   Please set in .env.local:');
    console.log('   • NEXT_PUBLIC_SUPABASE_URL');
    console.log('   • NEXT_PUBLIC_SUPABASE_ANON_KEY');
    process.exit(1);
  }

  // 2. Import Supabase functions now that env vars are confirmed
  console.log('\n📦 Loading Supabase modules...');
  try {
    const supabaseData = await import('../src/lib/supabase-data');
    const supabase = await import('../src/lib/supabase');
    
    saveDailyTipsToDb = supabaseData.saveDailyTipsToDb;
    checkSupabaseConnection = supabase.checkSupabaseConnection;
    getSupabaseConfig = supabase.getSupabaseConfig;
  } catch (error) {
    console.log('❌ Failed to load Supabase modules:', error);
    process.exit(1);
  }

  // 3. Test Supabase connection
  console.log('\n🔗 Testing Supabase connection...');
  const connected = await checkSupabaseConnection();
  if (!connected) {
    console.log('❌ Cannot connect to Supabase! Check your configuration and database schema.');
    process.exit(1);
  }
  console.log('✅ Supabase connection successful!');

  // 4. Get JSON files to migrate
  console.log('\n📁 Scanning for JSON files...');
  let files: string[];
  try {
    const allFiles = await fs.readdir(DATA_DIR);
    files = allFiles.filter(file => file.endsWith('.json')).sort();
    console.log(`   Found ${files.length} JSON files to process`);
    
    if (files.length === 0) {
      console.log('   No JSON files found to migrate.');
      return;
    }
  } catch (error) {
    console.log(`❌ Cannot read data directory: ${DATA_DIR}`);
    process.exit(1);
  }

  // 5. Process each file
  console.log('\n📊 Processing files...');
  const stats: MigrationStats = {
    filesProcessed: 0,
    filesSkipped: 0,
    tipsMigrated: 0,
    errors: []
  };

  for (const file of files) {
    const filePath = path.join(DATA_DIR, file);
    console.log(`\n📄 Processing: ${file}`);

    try {
      // Read and validate file
      const content = await fs.readFile(filePath, 'utf-8');
      const data = JSON.parse(content);
      const validatedData: DailyTipsPayload = validateDailyTips(data);

      console.log(`   📅 Date: ${validatedData.dateISO}`);
      console.log(`   🎯 Tips: ${validatedData.tips.length}`);
      console.log(`   🤖 Generated by: ${validatedData.generatedBy}`);

      // Check if already exists in Supabase
      const { supabase } = await import('../src/lib/supabase');
      const { data: existingTips, error: checkError } = await supabase
        .from('tips')
        .select('id')
        .eq('date_iso', validatedData.dateISO)
        .limit(1);

      if (checkError) {
        throw new Error(`Database check failed: ${checkError.message}`);
      }

      if (existingTips && existingTips.length > 0) {
        console.log(`   ⏭️  Skipping (already exists in database)`);
        stats.filesSkipped++;
        continue;
      }

      // Migrate to Supabase
      console.log(`   📤 Uploading to Supabase...`);
      await saveDailyTipsToDb(validatedData);
      
      console.log(`   ✅ Migration successful!`);
      stats.filesProcessed++;
      stats.tipsMigrated += validatedData.tips.length;

    } catch (error) {
      const errorMsg = `${file}: ${error instanceof Error ? error.message : 'Unknown error'}`;
      console.log(`   ❌ Error: ${errorMsg}`);
      stats.errors.push(errorMsg);
    }
  }

  // 6. Show final results
  console.log('\n' + '='.repeat(50));
  console.log('📊 MIGRATION RESULTS:');
  console.log(`   Files processed: ${stats.filesProcessed}`);
  console.log(`   Files skipped: ${stats.filesSkipped}`);
  console.log(`   Tips migrated: ${stats.tipsMigrated}`);
  console.log(`   Errors: ${stats.errors.length}`);

  if (stats.errors.length > 0) {
    console.log('\n❌ ERRORS:');
    stats.errors.forEach(error => console.log(`   • ${error}`));
  }

  if (stats.filesProcessed > 0) {
    console.log('\n🎉 Migration completed successfully!');
    console.log('   Your tips are now available in Supabase.');
    console.log('   You can now switch your app to use the database.');
  } else {
    console.log('\n⚠️  No new files were migrated.');
  }
}

// Command line options
const args = process.argv.slice(2);
const showHelp = args.includes('--help') || args.includes('-h');

if (showHelp) {
  console.log(`
🚀 Supabase Migration Script

USAGE:
  npm run migrate:supabase

DESCRIPTION:
  Migrates all betting tips from JSON files to Supabase database.
  
REQUIREMENTS:
  • Supabase project created
  • Database schema executed (supabase-schema.sql)
  • Environment variables set:
    - NEXT_PUBLIC_SUPABASE_URL
    - NEXT_PUBLIC_SUPABASE_ANON_KEY

SAFETY:
  • Only migrates files that don't exist in database
  • Validates all data before migration
  • Shows detailed progress and error reporting

EXAMPLE OUTPUT:
  📄 Processing: 2025-09-01.json
     📅 Date: 2025-09-01  
     🎯 Tips: 3
     📤 Uploading to Supabase...
     ✅ Migration successful!
`);
  process.exit(0);
}

// Run migration
migrateToSupabase().catch(error => {
  console.error('\n💥 Migration failed:', error);
  process.exit(1);
});
